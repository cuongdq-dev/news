---
import NavbarItem from "../bases/navbar-item.astro";
import ThemeController from "../bases/theme-controller.astro";

const { categories } = Astro.props as { categories: CategoryItem[] };
---

<header
  id="header-component"
  style={{ justifySelf: "anchor-center" }}
  class="px-3 mt-10 container rounded-lg space-y-4 transition-all duration-300 z-10"
>
  <div
    class="shadow-lg flex flex-nowrap items-center gap-4 max-w-screen-xl mx-auto w-full px-5 rounded-lg bg-base-100 dark:bg-base-300 pt-4 pb-4"
  >
    <button id="toggleOpen" class="lg:hidden">
      <svg
        class="w-7 h-7"
        fill="currentColor"
        viewBox="0 0 20 20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fill="currentColor"
          fill-rule="evenodd"
          d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"
          clip-rule="evenodd"></path>
      </svg>
    </button>

    <div
      class="max-lg:hidden lg:!block max-lg:w-full max-lg:fixed max-lg:before:fixed max-lg:before:bg-black max-lg:before:opacity-50 max-lg:before:inset-0 max-lg:before:z-50 z-50"
    >
      <ul
        class="lg:flex lg:gap-x-5 max-lg:space-y-3 max-lg:fixed max-lg:bg-base-200 max-lg:text-base max-lg:w-1/2 max-lg:min-w-[300px] max-lg:top-0 max-lg:left-0 max-lg:p-6 max-lg:h-full max-lg:shadow-md max-lg:overflow-auto z-50 bg-base-80"
      >
        <NavbarItem
          item={{ href: "/", name: "Trang Chủ", slug: "trang-chu" }}
        />
        <NavbarItem
          item={{ href: "/bai-viet", name: "Bài Viết", slug: "bai-viet" }}
        />
        {
          categories?.map((item) => (
            <NavbarItem item={{ ...item, href: `/danh-muc/${item.slug}` }} />
          ))
        }

        <NavbarItem item={{ href: "/tags", name: "Tags", slug: "tags" }} />
      </ul>
    </div>

    <div class="flex gap-4 ml-auto">
      <!-- <div
        class="flex max-w-xs w-full px-4 py-2 rounded outline outline-transparent border focus-within:border-blue-600 focus-within:bg-transparent transition-all"
      >
        <input
          type="text"
          placeholder="Search something..."
          class="h-100 w-full text-sm bg-transparent rounded outline-none pr-2"
        />
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 192.904 192.904"
          width="16px"
          class="cursor-pointer fill-gray-400"
        >
          <path
            d="m190.707 180.101-47.078-47.077c11.702-14.072 18.752-32.142 18.752-51.831C162.381 36.423 125.959 0 81.191 0 36.422 0 0 36.423 0 81.193c0 44.767 36.422 81.187 81.191 81.187 19.688 0 37.759-7.049 51.831-18.751l47.079 47.078a7.474 7.474 0 0 0 5.303 2.197 7.498 7.498 0 0 0 5.303-12.803zM15 81.193C15 44.694 44.693 15 81.191 15c36.497 0 66.189 29.694 66.189 66.193 0 36.496-29.692 66.187-66.189 66.187C44.693 147.38 15 117.689 15 81.193z"
          >
          </path>
        </svg>
      </div> -->
      <ThemeController />
    </div>
  </div>
</header>

<div
  id="collapseMenu"
  class="hidden max-lg:w-full max-lg:fixed max-lg:before:fixed max-lg:before:bg-black max-lg:before:opacity-50 max-lg:before:inset-0 max-lg:before:z-50 z-50"
>
  <ul
    class="lg:flex lg:gap-x-5 max-lg:space-y-3 max-lg:fixed max-lg:bg-base-200 max-lg:text-base max-lg:w-1/2 max-lg:min-w-[300px] max-lg:top-0 max-lg:left-0 max-lg:p-6 max-lg:h-full max-lg:shadow-md max-lg:overflow-auto z-50 bg-base-80"
  >
    <button
      id="toggleClose"
      class="lg:hidden fixed top-2 right-4 z-[100] rounded-full bg-white w-9 h-9 flex items-center justify-center border"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-3.5 h-3.5 fill-black"
        viewBox="0 0 320.591 320.591"
      >
        <path
          d="M30.391 318.583a30.37 30.37 0 0 1-21.56-7.288c-11.774-11.844-11.774-30.973 0-42.817L266.643 10.665c12.246-11.459 31.462-10.822 42.921 1.424 10.362 11.074 10.966 28.095 1.414 39.875L51.647 311.295a30.366 30.366 0 0 1-21.256 7.288z"
          data-original="#000000"></path>
        <path
          d="M287.9 318.583a30.37 30.37 0 0 1-21.257-8.806L8.83 51.963C-2.078 39.225-.595 20.055 12.143 9.146c11.369-9.736 28.136-9.736 39.504 0l259.331 257.813c12.243 11.462 12.876 30.679 1.414 42.922-.456.487-.927.958-1.414 1.414a30.368 30.368 0 0 1-23.078 7.288z"
          data-original="#000000"></path>
      </svg>
    </button>
    <NavbarItem item={{ href: "/", name: "Trang Chủ", slug: "trang-chu" }} />
    <NavbarItem
      item={{ href: "/bai-viet", name: "Bài Viết", slug: "bai-viet" }}
    />
    {
      categories?.map((item) => (
        <NavbarItem item={{ ...item, href: `/danh-muc/${item.slug}` }} />
      ))
    }
  </ul>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    const header = document.getElementById("header-component");
    header.classList.add("opacity-0", "-translate-y-full");

    if (window.scrollY > 50) {
      header.classList.add("mt-0");
      header.classList.remove("mt-5");
    }

    setTimeout(() => {
      header.classList.remove("-translate-y-full", "opacity-0");
      header.classList.add(
        "opacity-100",
        "transition-all",
        "duration-500",
        "ease-out"
      );
    }, 300);
  });

  window.addEventListener("scroll", function () {
    const header = document.getElementById("header-component");

    if (window.scrollY > 50) {
      header.classList.add(
        "mt-0",
        "fixed",
        "transform",
        "-translate-y-1/2",
        "bg-opacity-100",
        "transition-all",
        "duration-300",
        "ease-in-out",
        "opacity-100",
        "scale-120"
      );
      header.classList.remove("-translate-y-full", "opacity-0", "scale-120");
    } else {
      header.classList.add(
        "fixed",
        "scale-100",
        "opacity-100",
        "transition-all",
        "duration-300",
        "ease-in-out"
      );
      header.classList.remove(
        "mt-0",
        "fixed",
        "transform",
        "-translate-y-1/2",
        "bg-opacity-100",
        "transition-all",
        "duration-300",
        "ease-in-out",
        "opacity-100",
        "scale-120"
      );
    }
  });

  function setupMenuToggle() {
    const toggleOpen = document.getElementById("toggleOpen");
    const toggleClose = document.getElementById("toggleClose");
    const collapseMenu = document.getElementById("collapseMenu");
    const menuLinks = collapseMenu?.querySelectorAll("a") || [];

    menuLinks.forEach((link) => {
      link.removeEventListener("click", toggleMenu);
      link.addEventListener("click", toggleMenu);
    });
    function toggleMenu() {
      if (collapseMenu) {
        collapseMenu.classList.toggle("hidden");
        document.body.classList.toggle("overflow-hidden");
      }
    }

    if (toggleOpen) {
      toggleOpen.addEventListener("click", toggleMenu);
    }

    if (toggleClose) {
      toggleClose.addEventListener("click", toggleMenu);
    }

    document.addEventListener("click", function (event) {
      if (
        collapseMenu &&
        !collapseMenu.classList.contains("hidden") &&
        !collapseMenu.contains(event.target) &&
        !toggleOpen.contains(event.target)
      ) {
        collapseMenu.classList.add("hidden");
        document.body.classList.remove("overflow-hidden");
      }
    });
  }

  document.addEventListener("DOMContentLoaded", setupMenuToggle);

  document.addEventListener("astro:after-swap", setupMenuToggle);

  document.addEventListener("DOMContentLoaded", function () {
    const progressBar = document.createElement("div");
    progressBar.id = "progress-bar";
    Object.assign(progressBar.style, {
      position: "fixed",
      top: "0",
      left: "0",
      width: "0%",
      height: "3px",
      backgroundColor: "#ff4500",
      zIndex: "9999",
      transition: "width 0.3s ease-out, opacity 0.5s ease-in-out",
      opacity: "1",
    });
    document.body.appendChild(progressBar);

    let loading = false;
    let progress = 0;

    function startLoading() {
      if (loading) return; // Tránh gọi nhiều lần
      loading = true;
      progress = 0;
      progressBar.style.width = "0%";
      progressBar.style.opacity = "1";

      function animateProgress() {
        if (progress < 90) {
          progress += Math.random() * 2; // Tăng tốc độ ngẫu nhiên
          progressBar.style.width = progress + "%";
          requestAnimationFrame(animateProgress);
        }
      }
      animateProgress();
    }

    function finishLoading() {
      progressBar.style.width = "100%";
      setTimeout(() => {
        progressBar.style.opacity = "0";
        setTimeout(() => {
          progressBar.style.width = "0%"; // Reset về 0 để sẵn sàng cho lần tiếp theo
          loading = false;
        }, 500);
      }, 300);
    }

    document.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", function (event) {
        if (
          link.hostname === window.location.hostname &&
          link.target !== "_blank"
        ) {
          event.preventDefault();
          startLoading();

          setTimeout(() => {
            window.location.href = link.href;
          }, 700);
        }
      });
    });

    window.addEventListener("load", function () {
      finishLoading();
    });
  });
</script>
