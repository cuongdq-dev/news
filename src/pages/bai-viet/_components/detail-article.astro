---
import * as cheerio from "cheerio";
import Divider from "~/components/bases/divider.astro";
import BaseLayout from "~/layouts/base.astro";
import ContentLayout from "~/layouts/content.astro";
import { getPostBySlug, getPostRecents, getPostRelates } from "~/lib/api/post";
import { fRelativeTime } from "~/lib/utils/format-time";
import ArticleHeader from "./article-header.astro";
import { base64ToWebP } from "~/lib/utils/imageProcessor";
import TagList from "~/components/elements/tag-list.astro";
import NoData from "./no-data.astro";
import { AdsenseSquare } from "~/components/adsense";

const { slug } = Astro.params;
const { adsense } = Astro.locals;

const [detail, postRelates, postRecents] = await Promise.all([
  getPostBySlug(slug!),
  getPostRelates(slug!),
  getPostRecents(slug!),
]);

const slots =
  adsense?.adsense_slots?.filter((slot) => slot.slot_type === "detail") || [];
let slotIndex = 0;

const getNextSlot = () => {
  const slot = slots[slotIndex % slots.length];
  slotIndex++;
  return slot;
};

const processContent = () => {
  if (!detail?.data?.content) return "";
  const content = detail?.data?.content;
  const title = detail?.data?.title;

  const $ = cheerio.load(content);
  const allHeadings = $("h2");
  const allParagraphs = $("p");

  // Xóa tiêu đề trùng lặp
  $("h1").each((_, el) => {
    if ($(el).text().trim() === title.trim()) {
      $(el).remove();
    } else {
      $(el).replaceWith(`<h2>${$(el).html()}</h2>`);
    }
  });

  // Xóa link khỏi nội dung
  $("a").each((_, el) => {
    const text = $(el).text();
    $(el).replaceWith(text);
  });

  // Tìm vị trí hợp lý để chèn quảng cáo
  const insertAdAfter = (el: any) => {
    const slot = getNextSlot();
    if (!slot?.slot_id || !adsense?.adsense_client) return;

    const adsenseHtml = `
      <div class="ad-container my-4">
        <ins class="adsbygoogle" style="display:block; text-align:center;" data-ad-layout="in-article" data-ad-format="fluid" data-ad-client="ca-${adsense?.adsense_client}" data-ad-slot="${slot.slot_id}"></ins>
        <script>(adsbygoogle = window.adsbygoogle || []).push({});</script>
      </div>
    `;

    $(el).after(adsenseHtml);
  };

  // Chèn quảng cáo sau thẻ <h2> đầu tiên
  if (allHeadings.length > 0) {
    insertAdAfter(allHeadings.first());
  }

  // Chèn quảng cáo sau đoạn <p> thứ 2
  if (allParagraphs.length > 2) {
    insertAdAfter(allParagraphs.eq(1));
  }

  // Chèn quảng cáo ở giữa bài viết
  const middleIndex = Math.floor(allParagraphs.length / 2);
  if (middleIndex > 2) {
    insertAdAfter(allParagraphs.eq(middleIndex));
  }

  // Chèn quảng cáo trước đoạn <p> cuối cùng
  if (allParagraphs.length > 3) {
    insertAdAfter(allParagraphs.eq(-2));
  }

  return $.html();
};

const content = processContent();
---

<BaseLayout
  description={detail?.data?.meta_description}
  keywords={detail?.data?.relatedQueries
    ?.map((query) => query.query)
    .toString()}
  title={detail?.data?.title}
  ogImage={detail?.data?.thumbnail?.url}
  pubDatetime={detail?.data?.created_at}
  modDatetime={detail?.data?.created_at}
>
  <div class="container grid grid-cols-12 gap-6 p-0">
    <div class="col-span-12 md:col-span-8">
      <ContentLayout>
        {
          detail?.data ? (
            <>
              <ArticleHeader article={detail?.data} />
              <slot set:html={content} />
              <TagList tags={detail?.data?.relatedQueries} />
            </>
          ) : (
            <NoData />
          )
        }
      </ContentLayout>
    </div>

    <!-- Right Column: Related Posts -->
    <div class="col-span-12 p-4 rounded-lg md:col-span-4 pt-6">
      {
        postRelates.length > 0 && (
          <>
            <h4 class="text-md font-semibold mb-2">Bài viết liên quan</h4>
            <div>
              {postRelates?.map(async (article, index) => {
                const pub = adsense?.adsense_client || "";
                const slots =
                  adsense?.adsense_slots?.filter(
                    (slot) => slot.slot_type === "horizontal"
                  ) || [];
                const slotIndex = Math.floor(index / 2) % slots.length;
                const slot = slots[slotIndex];

                let thumbnail = {
                  src: article?.thumbnail?.url,
                  width: 800,
                  height: 600,
                };
                if (thumbnail.src?.startsWith("data:image/")) {
                  const processed = await base64ToWebP(
                    thumbnail.src.split(",")[1]
                  );
                  if (processed) {
                    thumbnail = processed;
                  }
                }
                return (
                  <>
                    <article class="flex mt-10">
                      <a
                        data-astro-prefetch="false"
                        href={`/bai-viet/${article?.slug}`}
                        class="flex flex-col gap-2 h-full"
                      >
                        <div class="aspect-video overflow-hidden rounded-md">
                          <img
                            alt={article?.thumbnail?.slug}
                            src={thumbnail.src}
                            width={thumbnail.width}
                            height={thumbnail.height}
                            class="w-full h-full object-cover"
                            loading={index < 3 ? "eager" : "lazy"}
                            decoding="async"
                            class="w-full h-full object-cover"
                          />
                        </div>
                        <div class="flex flex-col flex-1">
                          <span class="text-xl font-serif font-semibold lg:group-hover:underline line-clamp-2 text-pretty">
                            {article.title}
                          </span>
                          <div class="flex items-center text-xs text-base-content/80 mt-2">
                            <span class="text-xs text-primary/80">
                              {article?.categories
                                ?.map((cate) => cate.name)
                                .join(",")}
                            </span>
                            {Number(article?.categories?.length) > 0 && (
                              <Divider />
                            )}
                            <span class="text-xs text-base-content/80">
                              {fRelativeTime(article?.created_at)}
                            </span>
                          </div>
                          <p
                            set:html={article?.meta_description}
                            class="text-sm text-base-content/80 line-clamp-3 text-pretty lg:mb-auto m-0 mt-0"
                          />
                        </div>
                      </a>
                    </article>
                    {(index + 1) % 2 === 0 &&
                      index + 1 < postRelates.length && (
                        <article class="mt-10">
                          <AdsenseSquare
                            client:only="react"
                            pub={pub}
                            slot_adsense={{
                              id: slot?.slot_id,
                              name: slot?.slot_name,
                            }}
                          />
                        </article>
                      )}
                  </>
                );
              })}
            </div>
            <div class="divider" />
          </>
        )
      }

      {
        postRecents.length > 0 && (
          <>
            <h4 class="text-md font-semibold mb-2">Bài viết mới nhất</h4>
            <div>
              {postRecents?.map(async (article, index) => {
                const pub = adsense?.adsense_client || "";
                const slots =
                  adsense?.adsense_slots?.filter(
                    (slot) => slot.slot_type === "horizontal"
                  ) || [];
                const slotIndex = Math.floor(index / 2) % slots.length;
                const slot = slots[slotIndex];

                let thumbnail = {
                  src: article?.thumbnail?.url,
                  width: 800,
                  height: 600,
                };
                if (thumbnail.src?.startsWith("data:image/")) {
                  const processed = await base64ToWebP(
                    thumbnail.src.split(",")[1]
                  );
                  if (processed) {
                    thumbnail = processed;
                  }
                }
                return (
                  <>
                    <article class="flex mt-10">
                      <a
                        data-astro-prefetch="false"
                        href={`/bai-viet/${article?.slug}`}
                        class="flex flex-col gap-2 h-full need-click"
                      >
                        <div class="aspect-video overflow-hidden rounded-md">
                          <img
                            alt={article?.thumbnail?.slug}
                            src={thumbnail.src}
                            width={thumbnail.width}
                            height={thumbnail.height}
                            class="w-full h-full object-cover"
                            loading={index < 3 ? "eager" : "lazy"}
                            decoding="async"
                            class="w-full h-full object-cover"
                          />
                        </div>
                        <div class="flex flex-col flex-1">
                          <span class="text-xl font-serif font-semibold lg:group-hover:underline line-clamp-2 text-pretty">
                            {article.title}
                          </span>
                          <div class="flex items-center text-xs text-base-content/80 mt-2">
                            <span class="text-xs text-primary/80">
                              {article?.categories
                                ?.map((cate) => cate.name)
                                .join(",")}
                            </span>
                            {Number(article?.categories?.length) > 0 && (
                              <Divider />
                            )}
                            <span class="text-xs text-base-content/80">
                              {fRelativeTime(article?.created_at)}
                            </span>
                          </div>
                          <p
                            set:html={article?.meta_description}
                            class="text-sm text-base-content/80 line-clamp-3 text-pretty lg:mb-auto m-0 mt-0"
                          />
                        </div>
                      </a>
                    </article>

                    {(index + 1) % 2 === 0 &&
                      index + 1 < postRecents.length && (
                        <article class="mt-10">
                          <AdsenseSquare
                            client:only="react"
                            pub={pub}
                            slot_adsense={{
                              id: slot?.slot_id,
                              name: slot?.slot_name,
                            }}
                          />
                        </article>
                      )}
                  </>
                );
              })}
            </div>
          </>
        )
      }
    </div>
  </div>
</BaseLayout>
